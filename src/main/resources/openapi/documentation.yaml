openapi: "3.1.0"
info:
  title: "fourthwall API"
  description: "fourthwall API"
  version: "1.0.0"
servers:
- url: "https://fourthwall"
paths:
  /api/login:
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TypeInfo"
  /api/movie_details/{movieId}:
    get:
      description: ""
      parameters:
      - name: "movieId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Movie ID is required"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MovieDetailsResponse"
  /api/movie_details/rates:
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MovieRatingRequest"
        required: true
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Log in to review the movie"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "object"
  /api/movie_schedules:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/MovieWithSchedules"
    patch:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MovieWithSchedules"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Movie schedulkeadded successfully!"
  /api/movie_schedules/{movie_id}:
    delete:
      description: ""
      parameters:
      - name: "movie_id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Movie ID is required"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Movie schedule deleted successfully!"
    get:
      description: ""
      parameters:
      - name: "movie_id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Movie ID is required"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Movie ID not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MovieWithSchedules"
  /api/schedule/{schedule_id}:
    delete:
      description: ""
      parameters:
      - name: "schedule_id"
        in: "path"
        required: true
        schema:
          type: "number"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Movie ID is required"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Schedule deleted successfully!"
  /api/user:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserCreationResponse"
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreationRequest"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "object"
components:
  schemas:
    LoginRequest:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
      required:
      - "username"
      - "password"
    LoginResponse:
      type: "object"
      properties:
        accessToken:
          type: "string"
      required:
      - "accessToken"
    KType:
      type: "object"
      properties: {}
    TypeInfo:
      type: "object"
      properties:
        type:
          type: "object"
        kotlinType:
          $ref: "#/components/schemas/KType"
      required:
      - "type"
    Rating:
      type: "object"
      properties: {}
    MovieDetailsResponse:
      type: "object"
      properties:
        title:
          type: "string"
        year:
          type: "string"
        rated:
          type: "string"
        released:
          type: "string"
        runtime:
          type: "string"
        genre:
          type: "string"
        director:
          type: "string"
        writer:
          type: "string"
        actors:
          type: "string"
        plot:
          type: "string"
        language:
          type: "string"
        country:
          type: "string"
        awards:
          type: "string"
        poster:
          type: "string"
        metascore:
          type: "string"
        imdbRating:
          type: "string"
        imdbVotes:
          type: "string"
        imdbID:
          type: "string"
        type:
          type: "string"
        dvd:
          type: "string"
        boxOffice:
          type: "string"
        production:
          type: "string"
        website:
          type: "string"
        response:
          type: "string"
        ratings:
          type: "array"
          items:
            $ref: "#/components/schemas/Rating"
      required:
      - "ratings"
    BigDecimal:
      type: "object"
      properties: {}
    MovieRatingRequest:
      type: "object"
      properties:
        movieId:
          type: "string"
        rate:
          $ref: "#/components/schemas/BigDecimal"
      required:
      - "movieId"
      - "rate"
    Schedule:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        dateTime:
          type: "string"
          format: "date-time"
        price:
          $ref: "#/components/schemas/BigDecimal"
      required:
      - "dateTime"
      - "price"
    MovieWithSchedules:
      type: "object"
      properties:
        id:
          type: "string"
        title:
          type: "string"
        schedules:
          type: "array"
          items:
            $ref: "#/components/schemas/Schedule"
      required:
      - "id"
      - "schedules"
    UserCreationResponse:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        username:
          type: "string"
        role:
          type: "string"
      required:
      - "id"
      - "username"
      - "role"
    UserCreationRequest:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
        role:
          type: "string"
      required:
      - "username"
      - "password"
      - "role"